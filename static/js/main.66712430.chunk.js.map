{"version":3,"sources":["components/title.js","components/form.js","components/weather.js","App.js","serviceWorker.js","index.js"],"names":["Titles","react_default","a","createElement","React","Component","Form","onSubmit","this","props","getWeather","type","name","placeholder","Weather","city","country","temprature","humidity","description","error","API_Key","App","state","undefined","cod","_callee","e","api_call","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","console","log","_this","setState","main","temp","sys","weather","stop","title","components_form","humididty","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.66712430.chunk.js","sourcesContent":["import React from \"react\";\n\nclass Titles extends React.Component {\n    render(){\n        return(\n            <div>\n                <h1>Weather Finder</h1>\n                <p>Find Out Temprature Conditions and More</p>\n            </div>\n        );\n    }\n}\n\nexport default Titles;","import React from \"react\";\n\nclass Form extends React.Component{\n    render(){\n        return(\n            <form onSubmit={this.props.getWeather}>\n                <input type=\"text\" name=\"city\" placeholder=\"Enter the City\" />\n                <br />\n                <br />\n                <input type=\"text\" name=\"country\" placeholder=\"Enter the Country\" />\n                <br />\n                <br />\n                <button>Weather Reports</button>\n            </form>\n        );\n    }\n}\n\nexport default Form;","import React from \"react\";\n\nconst Weather=(props)=>{\n    return(\n        <div>\n            {props.city && props.country && <p>Location: {props.city},{props.country} </p> }\n            {props.temprature && <p>Temprature: {props.temprature} </p> }\n            {props.humidity && <p>Humidity: {props.humidity} </p> }\n            {props.description && <p>Conditions: {props.description} </p> } \n            {props.error && <p>{props.error}</p>}\n        </div>\n    );\n\n}\nexport default Weather;","import React, { Component } from 'react';\nimport Titles from \"./components/title\";\nimport Form from \"./components/form\";\nimport Weather from \"./components/weather\";\n\nconst API_Key=\"573d19ee4174835f0d5e19bc9579da14\";\n\nclass App extends Component {\n\n  state={\n    temprature: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    error: undefined,\n    cod: undefined\n  }\n  \n  getWeather= async (e)=>{\n    e.preventDefault();\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n\n    const api_call= await fetch(`https://cors-anywhere.herokuapp.com/http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_Key}&units=metric`);\n    const data = await api_call.json();\n    const cod=data.cod;\n\n      if(cod===200){\n        console.log(data);\n        this.setState({\n        temprature: data.main.temp,\n        city: data.name,\n        country: data.sys.country,\n        humidity: data.main.humidity,\n        description: data.weather[0].description,\n        error: \"\"\n      });\n\n      }\n\n      else{\n          this.setState({\n            temprature: undefined,\n            city: undefined,\n            country: undefined,\n            humidity: undefined,\n            description: undefined,\n            error: \"Unable to Find the Data\"\n          });\n      }\n    \n  }\n\n  render() {\n    return (\n      <div>\n       <Titles />\n       <Form getWeather={this.getWeather} />\n      <br></br>\n       <Weather \n        temprature={this.state.temprature}\n        city={this.state.city}\n        country={this.state.country}\n        humidity={this.state.humididty}\n        description={this.state.description}\n        error={this.state.error} \n        /> \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}